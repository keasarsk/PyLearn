-------------------------------------------------------day1-----------------------------------------------
变量
a='' 字符串
a=[] 列表类型
a=() 元组类型
a={} 字典类型


解释器安装完成之后如何验证是否安装成功
1: 点击 开始菜单 在里面找到 "搜索" 菜单，点击 输入 cmd【命令提示符】 找到并打开
2:按住window+R快捷键 可以快速的打开 运行窗口，并在里面输入python, 即可看到安装结果
如何退出python的交互式环境：
在环境里面输入 exit() 或者quit() 回车退出
声明一个.py文件 可以保存我们的python代码，那么如何执行这个python文件呢
 过程:首先打开命令行的提示符，进入到要执行文件的本地目录，然后在
 直接输入  python 文件的名字.py 【熟练一些基本的dos操作命令】
捷径：在打开执行文件的资源管理上面的路径输入框 敲入 cmd 命令即可

单行注释#
多行注释''' 注释'''或者"""注释 """
ctrl +/ 注释全部选中内容
特别注释 指定python解析器的路径 ，在py文件首行 #!/usr/bin/python3

pycharm:
一款pythonIDE （IDE集成开发环境）
  节省时间和精力，目的就是让开发者更加的快捷方便，通过提供的工具和各种性能来帮助开发者组织资源，减少失误，提供捷径
建立统一标准、管理开发工作

变量的学习：
 1：什么是变量呢
  变量其实就是个盒子，里面可以装各种东西，装了苹果，箱子和其他的东西结合的时候 就是属于苹果 ，装了香蕉 箱子和其他的东西结合的时候 就是属于香蕉
  在python当中 其实变量的概念和初中代数的方程变量是一只
  方程式 y=x*3  x就是变量 当x=2 结果就是6 x=10 结果就是30

  只不过在计算机中，在写程序的时候 变量不仅仅可以是数字，还可以是其他的任意类型

  食材+菜谱-（通过）>厨师-->美味的菜肴

  变量+逻辑-（通过）>python解释器-->软件的功能

  其实变量就是原材料【就是数据了】

  变量=存储的数据

  顾名思义:变量是一段有名字的的连续存储的空间，我们可以通过定义变量来申请并命名这样的存储空间，并通过变量的名字来使用这段存储空间

  变量是程序中临时存放数据的场所

  变量如何来定义和使用


----------------------------------------------------day2--------------------------------------------------

pass啥用没有 为了程序美观
print本身带换行 若想不换行就print（" ",end=" "）
true不是关键字True才是

流程控制记得冒号：

流程：就是计算机执行代码的顺序
流程控制：对计算机代码执行的顺序进行有效的管理，只有流程控制才能实现在开发当中的业务逻辑
流程控制的分类：
  1.顺序流程:就是代码一种自上而下的执行结构，也是python默认的流程
  2.选择流程/分支流程:根据在某一步的判断，有选择的去执行相应的逻辑的一种结构
     2.1 单分支 
        if 条件表达式:
          一条条的python代码
          .......

     2.2 双分支
        if 条件表达式:
          一条条的python代码
          .......
          pass
        else:
          一条条的python代码
          .......
          pass

     2.3 多分支
      if 条件表达式:
          一条条的python代码
          .......
          pass
        elif 条件表达式:
          一条条的python代码
          .......
          pass
        elif  条件表达式:
          一条条的python代码
          .......
          pass
        else:
          一条条的python代码
          .......
          pass

      条件表达式:比较运算符/逻辑运算符/复合的运算符

  3.循环流程：在满足一定的条件下，一直重复的去执行某段代码的逻辑【事情】

    while 条件表达式:
        一条条的python代码
        .......

    for 临时变量 in  可迭代集合对象:
        一条条的python代码
        .......

while使用：适用于对未知的循环次数 用于判断
for使用：适用于已知的循环次数【可迭代对象遍历】

-----------------------------------------------------day3---------------------------------------------

序列：在python当中 序列就是一组按照顺序排列的值【数据集合】
在python中 存在三种内置的序列类型：
字符串、列表、元组
优点：可以支持索引和切片的操作
特征：第一个正索引为0，指向的是左端，第一个索引为负数的时候，指向的是右端

切片：【高级特性】可以根据下表来获取序列对象的任意[部分]数据
语法结构：[start:end:step] step默认1

list:python当中非常重要的数据结构，是一种有序的数据集合
特点：
1：支持增删改查
2：列表中的数据是可以变化的【数据项可以变化，内存地址不会改变】
3:用[] 来表示列表类型，数据项之间用逗号来分割，注意：数据项可以是任何类型的数据
4：支持索引和切片来进行操作

元组：是一种不可变的序列，在创建之后不能做任何的修改
1：不可变
2：用（）创建元组类型，数据项用逗号来分割
3：可以是任何的类型
4：当元组中只有一个元素时，要加上逗号，不然后解释器会当做其他类型来处理
5：同样可是支持切片操作

字典：也是python中重要的数据类型，字典是有 键值对 组成的集合，通常使用 键来访问数据，效率非常高，和list一样 支持对数据的添加、修改、删除
特点：
1：不是序列类型 没有下标的概念，是一个无序的 键值集合，是内置的高级数据类型
2：用{} 来表示字典对象，每个键值对用逗号分隔
3：键 必须是不可变的类型【元组、字符串】 值可以是任意的类型
4: 每个键必定是惟一的，如果存在重复的键，后者会覆盖前者

--------------------------------------------------day4-----------------------------------------------

什么是函数：一系列Python语句的组合，可以在程序中运行一次或者多次，
一般是完成具体的独立的功能
为什么要使用函数：
代码的复用最大化以及最小化冗余代码，整体代码结构清晰，问题局部化
函数定义：
def 函数名():
  函数体[一系列的python语句，表示独立的功能]
函数的调用：
  本质上就是去执行函数定义里面的代码块，在调用函数之前 必须先定义

--------------------------------------------------day7----------------------------------------------------

面向对象编程：oop [object oriented programming] 是一种python的编程思路
面向过程：就是我们一开始学习的，按照解决问题的步骤去写代码 【根据业务逻辑去写代码】
在思考问题的时候, 首先分析'怎么按照步骤去实现' 然后将问题解决拆解成若干个步骤，并将这些步骤对应成方法一步一步的 最终完成功能
面向对象：关注的是设计思维【找洗车店   给钱洗车】

出差--北京
小明-- 什么时间 - -买什么票【高铁 汽车 飞机】---酒店---回程时间
亲力亲为的去做 【面向过程】

面向过程不足：小明没有更多的精力去考虑别的事情

boss--- 秘书【小明需要考虑的事情】----财务----目的：北京 【面向对象】

boss有更多的精力去处理其他的时候，创造更多的价值

从计算机的角度来看：面向过程不适合做大项目

而面向对象合适做更大项目的设计

类和对象

类:类是具有一组 相同或者相似特征【属性】和行为【方法】的一系列[多个]对象组合

现实世界    计算机世界
行为---------> 方法
特征---------->属性

对象: 对象是实实在在的一个东西，类的实例化，具象化

类是对象的抽象化  而对象是类的一个实例

实例方法：在类的内部，使用def 关键字来定义  第一个参数默认是 self【名字标识可以是其他的名字，但是这个位置必须被占用】

实例方法是归于 类的实例所有

属性：类属性  实例属性
在类的内部定义的变量【类属性】
在方法内部定义的【通过类似于self.变量名】 变量，是实例属性

--------------------------------------------------day8----------------------------------------------------

在python中展现面向对象的三大特征:
封装、继承、多态
封装:指的是把内容封装到某个地方，便于后面的使用
他需要:
把内容封装到某个地方
从另外一个地方去调用被封装的内容
--------对于封装来说 其实就是使用初始化构造方法将内容封装到对象中，然后通过对象直接或者self来获取被封装的内容

继承: 和现实生活当中的继承是一样的：也就是 子可以继承父的内容【属性和行为】（爸爸有的儿子都有，相反 儿子有的爸爸不一定有）
 所以对于面向对象的继承来说  其实就是将多个类共有的方法提取到父类中 子类仅需继承父类而不必一一去实现
 这样就可以极大的提高效率 减少代码的重复编写，精简代码的层级结构 便于拓展

 class 类名(父类):
      '''
       子类就可以继承父类中公共的属性和方法
      '''
  pass


为什么要使用静态方法呢
# 由于静态方法主要来存放逻辑性的代码，本身和类以及实例对象没有交互，
# 也就是说，在静态方法中，不会涉及到类中方法和属性的操作
# 数据资源能够得到有效的充分利用

从方法定义的形式可以看出来
1.类方法-------的第一个参数是类对象 cls 进而去引用类对象的属性和方法  必须用装饰器 @classmethod来修饰
  类方法使用类对象去调用 ，定义方式和实例方法一样都需要self，而类的self可以访问类属性和静态方法 不能访问实例属性
2.实例方法-----的第一个参数必须是self，通过这个self 可以去引用类属性或者实例属性，若存在相同名称实例属性和类属性的话，实例属性的优先级最高
  实例方法若想调用必须实例化类 用实例对象去调用
3.静态方法-----不需要定义额外的参数，若是要引用属性的话 则可以通过类对象或者是实例对象去引用即可   必须用装饰器 @staticmethod来修饰

  实例方法可以访问类方法和静态方法 ；类方法可以访问静态方法；静态方法谁都不能访问
多态：顾名思义就是多种状态、形态，就是同一种行为 对于不同的子类【对象】有不同的行为表现

要想实现多态 必须的有两个前提需要遵守：
1、继承：多态必须发生在父类和子类之间
2、重写: 子类重写父类的方法

多态有什么用:
增加程序的灵活性
增加程序的拓展性

--------------------------------------------------day9----------------------------------------------------

异常          导致的错误
AssertionError  当assert语句失败时引发。
AttributeError  当属性分配或引用失败时引发。
EOFError  当input()函数达到文件结束条件时引发。
FloatingPointError  当浮点运算失败时引发。
GeneratorExit 调用生成器的close()方法时引发。
ImportError 找不到导入的模块时引发。
IndexError  当序列的索引超出范围时引发。
KeyError  在字典中找不到键时引发。
KeyboardInterrupt 当用户按下中断键(Ctrl+c或delete)时引发。
MemoryError 当操作耗尽内存时引发。
NameError 在局部或全局范围内找不到变量时引发。
NotImplementedError 由抽象方法提出。
OSError 当系统操作导致系统相关错误时引发。
OverflowError 当算术运算的结果太大而无法表示时引发。
ReferenceError  使用弱引用代理访问垃圾收集的引用时引发。
RuntimeError  当错误不属于任何其他类别时引发。
StopIteration 函数引发，以指示迭代器不再返回任何项。
SyntaxError 遇到语法错误时由解析器引发。
IndentationError  当缩进不正确时引发。
TabError  当缩进由不一致的制表符和空格组成时引发。
SystemError 当解释器检测到内部错误时引发。
SystemExit  由sys.exit()函数引发。
TypeError 将函数或操作应用于类型不正确的对象时引发。
UnboundLocalError 当在函数或方法中引用局部变量，但没有将值绑定到该变量时引发。
UnicodeError  当发生与unicode相关的编码或解码错误时引发。
UnicodeEncodeError  当编码过程中发生与unicode相关的错误时引发。
UnicodeDecodeError  当解码过程中出现与unicode相关的错误时引发。
UnicodeTranslateError 翻译过程中发生与unicode相关的错误时引发。
ValueError  当函数得到类型正确但值不正确的参数时引发。
ZeroDivisionError 当除法或模运算的第二个操作数为零时引发。

--------------------------------------------------day10----------------------------------------------------

plane pro需求的描述：

存在四个对象：
我方飞机、敌方飞机、我方子弹、敌方子弹
功能:

背景音乐的添加

我方飞机可以移动【根据按键来控制的】
敌方飞机也可以移动【随机的自动移动】

双方飞机都可以发送子弹

步骤:
1.创建一个窗口
2.创建一个我方飞机 根据方向键左右的移动
3.给我方飞机添加发射子弹的功能【按下空格键去发送】
4.创建一个敌人飞机
5.敌人飞机可以自由的移动
6.敌人飞机可以自动的发射子弹

在安装pygame模块的时候尤其要注意一下：

如果在pychram中安装不成功  如下错误：
   EOFError: EOF when reading a line

    ----------------------------------------
Command "python setup.py egg_info" failed with error code 1 in C:\Users\Administrator\AppData\Local\Temp\pip-install-392v1at0\pygame\

此时我们就可以换种思路：

1：确保在系统层面的python环境里面 已经安装了pygame[pip install pygame] 一般都可以安装成功
2: 我们就可以把 已经安装好的 pygame 模块的 文件夹拷贝到 pycharm 所创建项目中的venv虚拟环境里面【E:\PythonPro\PlaneDemo\venv\Lib\site-packages】

soure path：C:\Users\Administrator\AppData\Local\Programs\Python\Python38-32\Lib\site-packages
dst path: 你的项目路径/venv\Lib\site-packages
 
--------------------------------------------------day13----------------------------------------------------

内容小结
元字符     说明                  正确    错误
\d      匹配任意单个数字           2      i、$
\D      匹配非数字                A/a     3
\w      匹配任意单个字母数字下划线  u       &
\W      匹配\w之外的任意单个字符    &       u
\s      匹配单个空格                       x
\S      匹配非空白，除空格，tab键之类 x
\n      匹配换行符
.       匹配任意单个字符【换行符除外】
\num    匹配前面引用的分组

多次的重复匹配
正则表达式     说明               正确   错误
A{3}          精准N次匹配        AAA     AA|A|AAAA
A{3,}          最少出现n次       AAA      A
\d{3,5}       约定出现最少次数和最大次数
\d*           可以出现0次至无限次 相当于{0,}
\d+           最少出现一次 相当于{1,}
\d?           最多出现一次 相当于{0,1} 1  12

定位匹配
正则表达式     说明            正确    错误
^A.*           头匹配          ABC    CBA
.*A$           尾部匹配        CBA     ABC
^A.*A$         全字匹配        ACCA    BAAA
字符的范围匹配
正则表达式     说明             正确   错误
A              精准匹配         A      a
x|y            匹配左右两边的字符 x/y   n
[xyz]          字符集合允许出现集合内任意单个字符 z、x、y     c、b
[a-z][A-Z][0-9]  字符范围
[^xyz][^0-9]     取反  集合内字符不允许出现的 0 A     y8

贪婪模式
在满足条件的情况下尽可能的去匹配多的字符串
实例:111222333  \d{6,8}
数据 ：小王出生于1997年   .*\d{4}年   贪婪模式

非贪婪模式
在满足条件的情况下尽可能的去匹配少的字符串
实例:111222333  \d{6,8}?
数据 ：小王出生于1997年   .*?\d{4}年   贪婪模式
